====== Exercise 3 - SQL Basics 2 ======

1 | Count how many customers have postalcode length of 5. Use aliasname postalcode_count for this column.
--------------------------------------------------
SELECT COUNT(*) AS postalcode_count FROM customers WHERE LENGTH(PostalCode) = 5;
--------------------------------------------------

##################################################
2 | Select minimum and maximum price from products with product name starting with letters A, E, K or M.
--------------------------------------------------
SELECT MIN(Price) AS Minimum_Price, MAX(Price) AS Maximum_Price FROM products WHERE ProductName LIKE 'A%' OR ProductName LIKE 'E%' OR ProductName LIKE 'K%' OR ProductName LIKE 'M%';
--------------------------------------------------

##################################################
3 | Calculate average price for each categoryID. Present average prices with two decimals and order the result set by average price in descending order.
--------------------------------------------------
SELECT CategoryID, ROUND(AVG(Price), 2) AS Average_Price FROM products GROUP BY CategoryID ORDER BY Average_Price DESC;
--------------------------------------------------

##################################################
4 | Present employees in the following format in one column: firstname lastname is born in year. For example "Anna Davis is born in 1992".
Use aliasname employee_info for this column. Order the result set by birth year so that youngest employee will be shown first.
--------------------------------------------------
SELECT CONCAT(firstname, ' ', lastname, ' is born in ', YEAR(Birthdate)) AS employee_info FROM employees ORDER BY YEAR(BirthDate) ASC;
--------------------------------------------------

##################################################
5 | Select employees who have been in more than 20 orders. Show employeeID and count of orders in the result set. Use order_count aliasname for the column.
--------------------------------------------------
SELECT employees.EmployeeID, COUNT(orders.OrderID) AS order_count FROM employees JOIN orders ON employees.EmployeeID = orders.EmployeeID GROUP BY employees.EmployeeID HAVING order_count > 20;
--------------------------------------------------

##################################################
6 | Create usernames for the employees by using the following format: two first letters from the firstname, three last letters from the lastname 
and length of the employee notes. For example, Nancy Davolio would have a username of Nalio167.
--------------------------------------------------
SELECT LastName, FirstName, CONCAT(SUBSTRING(FirstName, 1, 2), SUBSTRING(LastName, -3), LENGTH(Notes)) AS UserName FROM employees;
--------------------------------------------------

##################################################
7 | Count how many pieces of each product have been sold. Present productID and total amount of sold products in the result set.
Use alias name total for the column and order the result set by count in descending order. 
--------------------------------------------------
SELECT ProductID, COUNT(Quantity) AS Total FROM orderdetails GROUP BY ProductID ORDER BY Total DESC;
--------------------------------------------------

##################################################
8 | Categorise supplier phone numbers with the following criteria:
	- If phone number has brackets and a dash included -> Valid
	- If phone number has either brackets or dash (not both) -> Partly valid
	- In any other case -> Not a phone number
Present only phone number and categorised value in the result set.
--------------------------------------------------
SELECT 
    Phone, 
    CASE 
        WHEN Phone LIKE '%(%' AND Phone LIKE '%)%' AND Phone LIKE '%-%' THEN 'Valid' 
        WHEN (Phone LIKE '%(%' AND Phone NOT LIKE '%)%') OR (Phone LIKE '%)%' AND Phone NOT LIKE '%(%') 
            OR (Phone LIKE '%-%' AND Phone NOT LIKE '%(%' AND Phone NOT LIKE '%)%') THEN 'Partly valid' 
        ELSE 'Not a phone number' 
    END AS 'categorised value' 
FROM 
    suppliers;
--------------------------------------------------

##################################################
9 | Show number of orders for each customerID. Include only orders that have been shipped by shipperID 1 or 3.
Only those customers should be presented in the result set who have done 3 or more orders. Result set should include
customerID and order count (use aliasname number_of_orders for the column). 
--------------------------------------------------
SELECT CustomerID, COUNT(*) AS number_of_orders FROM orders WHERE ShipperID IN (1, 3) GROUP BY CustomerID HAVING number_of_orders >= 3;
--------------------------------------------------

##################################################
10 | Do the following calculations for each supplierID:
	- total price of products (use alias total_price)
	- average price of products (use alias average_price and present without decimals)
	- amount of products (use alias amount_of_products)
	- amount of missing product price values (use alias null_count)
For example, supplierID 1 has the following values (total_price: 85, average_price: 17, amount_of_products: 5, null_count: 0)
--------------------------------------------------
SELECT SUM(Price) AS total_price, ROUND(AVG(Price)) AS average_price, COUNT(*) AS amount_of_products, SUM(CASE WHEN Price IS NULL THEN 1 ELSE 0 END) AS null_count FROM products GROUP BY SupplierID;
--------------------------------------------------